/*
  1. Операція spread як заміна concat і slice
*/

//*  Копія массива

// const array = [1, 2, 3, 4, 5];

//* Об'єднання масивів через spread замість concat

/*
  2. Копія об'єкту
*/

// const user = {
//   firstName: 'Jonathan',
//   lastName: 'Barnett',
//   age: 30,
// };

/*
  3. Spread + Rest

  Напишіть функцію getMinNumber яка приймає довільну кількість чисел
  та повертає найменше із них
*/

/*
  4. Деструктуризація об'єктів, які проблеми вирішує
*/

/*
  Напишіть деструктуризуюче присвоювання, яке:
  властивість firstName присвоїть у змінну firstName
  властивість age присвої присвоїть у змінну userAge
  властивість isAdmin присвоїть у змінну isAdmin (false, по дефолту
  якщо, у об'єкта данної властивості не буде)
*/

// const user = {
//   firstName: 'Andrii',
//   lastName: 'Shevchuk',
//   age: 30,
// };

/*
  5. Глубока деструктуризація об'єктів, дістати також original та secondary
*/

// const team = {
//   number: 4,
//   flag: './images/flag.jpg',
//   employees: ['Anton', 'Oleg', 'Ronnie', 'Carr'],
//   langs: {
//     original: 'uk',
//     secondary: 'en',
//   },
// };

/*
  6. Деструктуризація масивів
*/

/*
  Дістати перший та третій елементи масиву, всі інші після 
  третього занести в окремий масив
*/

// const names = ['Herbert Todd', 'Belle Soto', 'Roger Marsh', 'Ethan Lindsey'];

/*
  Дістати значення кольорів та властивість alpha
*/

// const rgb = [0, 255, 34];

/*
  У нас є об'єкт salaries з зарплатами

  Створіть функцію topSalary(salaries), яка повертає ім'я найбільш
  високооплачуваного працівника

  Якщо об'єкт salaries пустий то повернути null

  Якщо декілька людей з одною тою самою зарплатою є найбільш високоплачуваними, можна 
  повернути будь-якого з них
 
  Використовуйте Object.entries та деструктуризацію, щоб перебрати пари ключ/значение.
*/

// const salaries = {
//   John: 100,
//   Pete: 300,
//   Mary: 250,
// };
